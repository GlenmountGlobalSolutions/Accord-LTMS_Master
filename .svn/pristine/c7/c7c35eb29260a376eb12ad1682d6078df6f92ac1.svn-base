Imports System.Data.SqlClient
Imports System.Xml

Public Class ODSStationConfiguration
    Inherits System.Web.UI.Page

#Region "Properties and Enums"

    ' See table tblConfigurationTypes
    Enum ConfigurationTypes
        InstructionSet = 1
        InstructionStepFilters = 2
        AuxiliaryListA = 3
        AuxiliaryListB = 4
    End Enum

    'gridview gvSteps column configuration
    Enum gvStepsColumnConfig
        rbSelector
        InstructionID
        StepID
        DisplayID
        Color
        Description
    End Enum

    'First six columns of gridview gvChecks
    Enum gvChecksColumnConfig
        InstructionID
        StepID
        DisplayID
        SeeEDSFlag
        SpecificQualityFlag
        SeqControlFlag
    End Enum

    Private _selectedRowIndex As Integer = -1

    Private Property SelectedRowIndex() As Integer
        Get
            If (String.IsNullOrWhiteSpace(Request.Form("rbgSelectorGroup"))) OrElse (Integer.TryParse(Request.Form("rbgSelectorGroup"), _selectedRowIndex) = False) Then
                _selectedRowIndex = -1
            End If

            Return _selectedRowIndex
        End Get
        Set(value As Integer)
            _selectedRowIndex = value
        End Set
    End Property


    Private ReadOnly Property LineID As Integer
        Get
            Dim id As Integer = -1
            Integer.TryParse(ddlLineNumbers.SelectedValue, id)
            Return id
        End Get
    End Property

    Private ReadOnly Property StationID As String
        Get
            Return ddlStations.SelectedValue
        End Get
    End Property

    Private ReadOnly Property ConfigurationID As Integer
        Get
            Dim id As Integer = -1
            Integer.TryParse(ddlInstructionSets.SelectedValue, id)
            Return id
        End Get
    End Property

#End Region

#Region "Events"
    Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load
        Try
            If Page.IsPostBack Then
                If (txtMCRDateNew.Text.Length = 0) Then
                    txtMCRNumberNew.Text = lblMCRNumber.Text
                    txtMCRDateNew.Text = lblMCRDate.Text
                End If
            Else
                'Expire the current cache associated with the sqlDataSource_Colors which will force new data to be pulled.
                'If this is not done, subsequent new page trips will pull data from cache to populate the GridView
                Cache.Remove(sqlDataSource_Colors.CacheKeyDependency)
                Cache(sqlDataSource_Colors.CacheKeyDependency) = "CacheCleared"

                LoadConfigurationTypeLabels()
                BuildGrid2Columns()
                InitializPageDropDownLists()

            End If
        Catch ex As Exception
            Master.eMsg(ex.ToString())
        End Try
    End Sub

    Private Sub Page_PreRender(ByVal sender As Object, ByVal e As System.EventArgs) Handles MyBase.PreRender
        EnableControls()
    End Sub


    Private Sub gvSteps_Load(sender As Object, e As System.EventArgs) Handles gvSteps.Load
        Try
            gvSteps.SelectedIndex = SelectedRowIndex
            gvChecks.SelectedIndex = SelectedRowIndex

        Catch ex As Exception
            Master.eMsg(ex.ToString())
        End Try

    End Sub

    Private Sub gvSteps_RowCreated(sender As Object, e As System.Web.UI.WebControls.GridViewRowEventArgs) Handles gvSteps.RowCreated
        Try
            If e.Row.RowType = DataControlRowType.DataRow Then

                ' get a reference to the Literal control
                Dim radioButtonOutput As Literal = CType(e.Row.FindControl("rbSelector"), Literal)

                If (radioButtonOutput IsNot Nothing) Then

                    ' Output the radiobutton markup except for the "checked" attribute
                    radioButtonOutput.Text = String.Format("<input id='RowIndex{0}' type='radio' name='rbgSelectorGroup' value='{0}' ", e.Row.RowIndex)

                    If (SelectedRowIndex = e.Row.RowIndex) Then
                        radioButtonOutput.Text += " checked='checked'"
                    End If
                    If ddlInstructionSets.SelectedIndex <= 0 Then
                        radioButtonOutput.Text += " DISABLED='DISABLED'"
                    End If
                    radioButtonOutput.Text += " />"

                End If
            End If
        Catch ex As Exception
            Master.eMsg(ex.ToString())
        End Try
    End Sub

    Private Sub gvSteps_RowDataBound(sender As Object, e As System.Web.UI.WebControls.GridViewRowEventArgs) Handles gvSteps.RowDataBound
        Try
            '  do not use the visible property of the BulkEditBoundField on the ASPX page
            '  ---------------------------------------------------------------------
            e.Row.Cells(gvStepsColumnConfig.StepID).Visible = False  'hide column StepID
            e.Row.Cells(gvStepsColumnConfig.InstructionID).Visible = False  'hide column InstructionID

            Dim ddlColorNames As DropDownList
            Dim colorName As String

            If e.Row.RowType = DataControlRowType.DataRow Then

                colorName = DataBinder.Eval(e.Row.DataItem, "Color").ToString()
                ' if there is a value for colorname, find the dropdownlist and see if contains the value, if so, then set the selcted value
                If (colorName.Trim.Length > 0) Then
                    ddlColorNames = CType(e.Row.FindControl("ddlColor"), DropDownList)
                    If (ddlColorNames IsNot Nothing) Then
                        If Not IsNothing(ddlColorNames.Items.FindByValue(colorName)) Then
                            ddlColorNames.SelectedValue = colorName
                        End If
                    End If
                End If
            End If

        Catch ex As Exception
            Master.eMsg(ex.ToString())
        End Try
    End Sub

    Private Sub gvChecks_RowDataBound(sender As Object, e As System.Web.UI.WebControls.GridViewRowEventArgs) Handles gvChecks.RowDataBound
        Try
            If (e.Row.RowType = DataControlRowType.Header) Then
                Dim i As Integer = 0
                For Each cell As DataControlFieldHeaderCell In e.Row.Cells
                    cell.Attributes.Add("title", cell.Text)
                    Select Case i
                        '  do not use the visible property of the BulkEditBoundField on the ASPX page
                        '  ---------------------------------------------------------------------
                        Case gvChecksColumnConfig.InstructionID, gvChecksColumnConfig.StepID, gvChecksColumnConfig.DisplayID
                            'hide columns InstructionID, StepID & DisplayID
                            cell.Visible = False
                            '  ---------------------------------------------------------------------

                        Case gvChecksColumnConfig.SeeEDSFlag
                            cell.Text = String.Format("<img id='imgSeeEDS' src='../../../Images/ODS/SeeEDS.png' /><span class='rotateHeader45 odsHeaderSpecial'>{0}</span><div class='coverClip' />", cell.Text)

                        Case gvChecksColumnConfig.SpecificQualityFlag
                            cell.Text = String.Format("<img id='imgSpecificQuality' src='../../../Images/ODS/SpecificQuality.png' /><span class='rotateHeader45 odsHeaderSpecial'>{0}</span>", cell.Text)

                        Case gvChecksColumnConfig.SeqControlFlag
                            cell.Text = String.Format("<img id='imgSeqControl' src='../../../Images/ODS/SeqControl.png' /><span class='rotateHeader45 odsHeaderSpecial'>{0}</span>", cell.Text)

                        Case Else
                            If i Mod 2 = 0 Then
                                cell.Text = String.Format("<span class='rotateHeader45 odsHeader'>{0}</span>", cell.Text)
                                cell.CssClass = "odsColumn"
                            Else
                                cell.Text = String.Format("<span class='rotateHeader45 odsHeaderAlt'>{0}</span>", cell.Text)
                                cell.CssClass = "odsColumnAlt"
                            End If

                    End Select

                    i = i + 1
                Next
            ElseIf (e.Row.RowType = DataControlRowType.DataRow) Or (e.Row.RowType = DataControlRowType.EmptyDataRow) Then
                Dim i As Integer = 0
                For Each cell As DataControlFieldCell In e.Row.Cells
                    Select Case i
                        '  do not use the visible property of the BulkEditBoundField on the ASPX page
                        '  ---------------------------------------------------------------------
                        Case gvChecksColumnConfig.InstructionID, _
                            gvChecksColumnConfig.StepID, _
                            gvChecksColumnConfig.DisplayID

                            'hide columns InstructionID, StepID & DisplayID
                            cell.Visible = False
                            '  ---------------------------------------------------------------------

                        Case gvChecksColumnConfig.SeeEDSFlag, _
                            gvChecksColumnConfig.SpecificQualityFlag, _
                            gvChecksColumnConfig.SeqControlFlag

                            cell.CssClass = "odsColumnSpecial"

                        Case Else
                            If i Mod 2 = 0 Then
                                cell.CssClass = "odsColumn"
                            Else
                                cell.CssClass = "odsColumnAlt"
                            End If

                    End Select

                    i = i + 1
                Next
            End If
        Catch ex As Exception
            Master.eMsg(ex.ToString())
        End Try
    End Sub

    Private Sub gvSteps_RowUpdating(sender As Object, e As System.Web.UI.WebControls.GridViewUpdateEventArgs) Handles gvSteps.RowUpdating
        'If the row had an update, then pass the selected value.  if this is not done, then the edit will effectively save an empty value.
        e.NewValues("Color") = CType(gvSteps.Rows(e.RowIndex).FindControl("ddlColor"), DropDownList).SelectedValue
    End Sub

    Private Sub gvSteps_RowEditing(sender As Object, e As System.Web.UI.WebControls.GridViewEditEventArgs) Handles gvSteps.RowEditing
        Try
            gvChecks.EditIndex = e.NewEditIndex

        Catch ex As Exception
            Master.eMsg(ex.ToString())
        End Try
    End Sub

    Protected Sub gvSteps_SelectedIndexChanged(sender As Object, e As EventArgs) Handles gvSteps.SelectedIndexChanged
        Try
            gvChecks.SelectedIndex = gvSteps.SelectedIndex

        Catch ex As Exception
            Master.eMsg(ex.ToString())
        End Try
    End Sub

    Private Sub gvSteps_RowCancelingEdit(sender As Object, e As System.Web.UI.WebControls.GridViewCancelEditEventArgs) Handles gvSteps.RowCancelingEdit
        Try
            gvChecks.EditIndex = -1

        Catch ex As Exception
            Master.eMsg(ex.ToString())
        End Try
    End Sub

    Private Sub ddlLineNumbers_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ddlLineNumbers.SelectedIndexChanged
        Try
            If (ddlLineNumbersCopySrc.Items.Count >= ddlLineNumbers.SelectedIndex) Then
                ddlLineNumbersCopySrc.SelectedIndex = ddlLineNumbers.SelectedIndex
            End If
            LoadStations()
            LoadInstructions()
        Catch ex As Exception
            Master.eMsg(ex.ToString())
        End Try
    End Sub

    Private Sub ddlStations_SelectedIndexChanged(sender As Object, e As System.EventArgs) Handles ddlStations.SelectedIndexChanged
        Try
            If (ddlStationsCopySrc.Items.Count >= ddlStations.SelectedIndex) Then
                ddlStationsCopySrc.SelectedIndex = ddlStations.SelectedIndex
                LoadInstructionsCopySrc()
            End If
            LoadInstructions()
        Catch ex As Exception
            Master.eMsg(ex.ToString())
        End Try
    End Sub

    Private Sub ddlInstructionSets_SelectedIndexChanged(sender As Object, e As System.EventArgs) Handles ddlInstructionSets.SelectedIndexChanged
        Try
            If (ddlInstructionSetsCopySrc.Items.Count >= ddlInstructionSets.SelectedIndex) Then
                ddlInstructionSetsCopySrc.SelectedIndex = ddlInstructionSets.SelectedIndex
                LoadInstructionsCopySrc()
            End If
            LoadInstructions()
        Catch ex As Exception
            Master.eMsg(ex.ToString())
        End Try
    End Sub

    Private Sub cmdMoveUp_Click(sender As Object, e As System.Web.UI.ImageClickEventArgs) Handles cmdMoveUp.Click
        Try
            If (gvSteps.SelectedIndex = 0) Then
                Master.Msg = "ERROR:  cannot move row up..."
            ElseIf (gvSteps.SelectedIndex < 0) Then
                Master.Msg = "Please Select a Row"
            Else
                rowSelectorDelta.Value = "-1"
                gvSteps.MoveSelectedRowUp()
                gvChecks.MoveSelectedRowUp()
            End If
        Catch ex As Exception
            Master.eMsg(ex.ToString())
        End Try
    End Sub

    Private Sub cmdMoveDown_Click(sender As Object, e As System.Web.UI.ImageClickEventArgs) Handles cmdMoveDown.Click
        Try
            If (gvSteps.SelectedIndex = gvSteps.Rows.Count - 1) Then
                Master.Msg = "ERROR:  cannot move row down..."
            ElseIf (gvSteps.SelectedIndex < 0) Then
                Master.Msg = "Please Select a Row"
            Else
                rowSelectorDelta.Value = "1"
                gvSteps.MoveSelectedRowDown()
                gvChecks.MoveSelectedRowDown()
            End If
        Catch ex As Exception
            Master.eMsg(ex.ToString())
        End Try
    End Sub

    Private Sub cmdSave_Click(sender As Object, e As System.EventArgs) Handles cmdSave.Click
        SaveInstructionSteps()
    End Sub

    Private Sub cmdCopy_Click(sender As Object, e As System.EventArgs) Handles cmdCopy.Click
        CopyStepsToInstruction()
    End Sub

    Private Sub cmdClearRow_Click(sender As Object, e As System.EventArgs) Handles cmdClearRow.Click
        Try
            gvSteps.ClearSelectedRowData()
            gvChecks.ClearSelectedRowData()

        Catch ex As Exception
            Master.eMsg(ex.ToString())
        End Try
    End Sub

    Private Sub cmdRefresh_Click(sender As Object, e As System.EventArgs) Handles cmdRefresh.Click
        Try
            If (ddlInstructionSetsCopySrc.Items.Count >= ddlInstructionSets.SelectedIndex) Then
                ddlInstructionSetsCopySrc.SelectedIndex = ddlInstructionSets.SelectedIndex
                LoadInstructionsCopySrc()
            End If
            LoadInstructions()
        Catch ex As Exception
            Master.eMsg(ex.ToString())
        End Try
    End Sub
#End Region

#Region "Methods"
    Private Sub InitializPageDropDownLists()
        ResetPage(Nothing, Nothing, Nothing)
    End Sub

    Private Sub ResetPage(ByVal lineID As Integer, ByVal stationID As String, ByVal instructionConfigurationID As Integer)
        Try
            LoadLines()
            If lineID <> 0 Then                         'select line
                ddlLineNumbers.SelectedIndex = ddlLineNumbers.Items.IndexOf(ddlLineNumbers.Items.FindByValue(lineID.ToString()))
                ddlLineNumbersCopySrc.SelectedIndex = ddlLineNumbers.SelectedIndex
            End If

            LoadStations()
            If stationID IsNot Nothing Then             'select station
                ddlStations.SelectedIndex = ddlStations.Items.IndexOf(ddlStations.Items.FindByValue(stationID))
                ddlStationsCopySrc.SelectedIndex = ddlStations.SelectedIndex
            End If

            LoadInstructionSets()
            If instructionConfigurationID <> 0 Then    'select instruction set
                ddlInstructionSets.SelectedIndex = ddlInstructionSets.Items.IndexOf(ddlInstructionSets.Items.FindByValue(instructionConfigurationID.ToString()))
                ddlInstructionSetsCopySrc.SelectedIndex = ddlInstructionSets.SelectedIndex
            End If

            lbInstructionsCopySrc.Items.Clear()
            lbInstructionsCopyDst.Items.Clear()

            LoadAuxiliaryList(cblAuxListA, ConfigurationTypes.AuxiliaryListA)
            LoadAuxiliaryList(cblAuxListB, ConfigurationTypes.AuxiliaryListB)

            LoadInstructionsCopySrc()
            LoadInstructions()

            copyStepCount.Value = "0"

        Catch ex As Exception
            Master.eMsg(ex.ToString())
        End Try
    End Sub

    Private Sub BuildGrid2Columns()
        Dim i As Integer
        Dim countOfgvChecksType As Integer
        Dim startingColumnCount As Integer
        Dim ds As DataSet = Nothing
        Dim maxCols As Integer = 3
        Dim minCols As Integer = 2
        Try
            countOfgvChecksType = [Enum].GetValues(GetType(gvChecksColumnConfig)).Length
            startingColumnCount = gvChecks.Columns.Count - 1

            For i = countOfgvChecksType To startingColumnCount
                gvChecks.Columns.RemoveAt(countOfgvChecksType)
            Next

            ds = GetInstructionStepConfigurations(LineID, StationID, ConfigurationID)

            If (ds.IsNotEmpty()) Then
                For i = countOfgvChecksType To ds.Tables(0).Columns.Count - 1
                    Dim checkCol As New CheckBoxField
                    checkCol.HeaderText = ds.Tables(0).Columns(i).ColumnName
                    checkCol.DataField = checkCol.HeaderText
                    gvChecks.Columns.Insert(i, checkCol)
                Next

                cblAuxListA.RepeatColumns = Utility.IntegerWithinBounds(1 + (ds.Tables(0).Columns.Count \ countOfgvChecksType), minCols, maxCols)

            End If

            gvChecks.DataSource = ds
            gvChecks.DataBind()

        Catch ex As Exception
            Master.eMsg(ex.ToString())
        End Try
    End Sub

    Private Sub LoadConfigurationTypeLabels()
        Dim ds As DataSet = GetConfigurationTypes()

        If ((ds IsNot Nothing) AndAlso (ds.Tables(0).Rows.Count > 0)) Then
            For Each row As DataRow In ds.Tables(0).Rows
                If CInt(row.Item("ConfigurationTypeID")) = ConfigurationTypes.InstructionSet Then
                    'sets the label over the third drop down which defaults to "Instruction Sets"
                    lblInstructionSet.Text = row.Item("Description").ToString() & ":"
                    lblInstructionSetCopySrc.Text = row.Item("Description").ToString() & ":"

                ElseIf CInt(row.Item("ConfigurationTypeID")) = ConfigurationTypes.AuxiliaryListA Then
                    'sets the label over the first auxiliary list which defaults as "Axiliary List A"
                    lblAuxListA.Text = row.Item("Description").ToString()

                ElseIf CInt(row.Item("ConfigurationTypeID")) = ConfigurationTypes.AuxiliaryListB Then
                    'sets the label over the second auxiliary list which defaults as "Axiliary List B"
                    lblAuxListB.Text = row.Item("Description").ToString()

                End If
            Next

        End If

    End Sub

    Private Sub LoadLines()
        Try
            Dim ds As DataSet = DA.GetDataSet("SELECT LineID, LineName FROM dbo.tblSGLines")

            ' Lines for the drop-down list on the main web page
            ddlLineNumbers.Items.Clear()
            ddlLineNumbers.DataSource = ds
            ddlLineNumbers.DataTextField = "LineName"
            ddlLineNumbers.DataValueField = "LineID"
            ddlLineNumbers.DataBind()
            ddlLineNumbers.Items.Insert(0, New ListItem("Choose a Line", ""))

            'Lines for the copy dialogue src
            ddlLineNumbersCopySrc.Items.Clear()
            ddlLineNumbersCopySrc.DataSource = ds.Copy
            ddlLineNumbersCopySrc.DataTextField = "LineName"
            ddlLineNumbersCopySrc.DataValueField = "LineID"
            ddlLineNumbersCopySrc.DataBind()
            ddlLineNumbersCopySrc.Items.Insert(0, New ListItem("Choose a Line", ""))

            'Lines for the copy dialogue destination
            ddlLineNumbersCopyDst.Items.Clear()
            ddlLineNumbersCopyDst.DataSource = ds.Copy
            ddlLineNumbersCopyDst.DataTextField = "LineName"
            ddlLineNumbersCopyDst.DataValueField = "LineID"
            ddlLineNumbersCopyDst.DataBind()
            ddlLineNumbersCopyDst.Items.Insert(0, New ListItem("Choose a Line", ""))

        Catch ex As Exception
            Master.eMsg(ex.ToString())
        End Try
    End Sub

    Private Sub LoadStations()
        Try
            Dim ds As DataSet = Nothing
            ddlStations.Items.Clear()
            If (ddlLineNumbers.SelectedIndex > 0) Then
                ds = GetStations(LineID)

                ddlStations.DataSource = ds
                ddlStations.DataTextField = "Description"
                ddlStations.DataValueField = "StationID"
                ddlStations.DataBind()

                ddlStationsCopySrc.DataSource = ds.Copy
                ddlStationsCopySrc.DataTextField = "Description"
                ddlStationsCopySrc.DataValueField = "StationID"
                ddlStationsCopySrc.DataBind()
            End If

            ddlStations.Items.Insert(0, New ListItem("Choose a Station", ""))
            ddlStationsCopySrc.Items.Insert(0, New ListItem("Choose a Station", ""))
            ddlStationsCopyDst.Items.Insert(0, New ListItem("Choose a Station", ""))
            ddlStationsCopyDst.SelectedIndex = 0

        Catch ex As Exception
            Master.eMsg(ex.ToString())
        End Try
    End Sub

    Private Sub LoadInstructionSets()
        Try
            Dim ds As DataSet = Nothing

            ddlInstructionSets.Items.Clear()

            If (ddlStations.SelectedIndex > 0) Then
                ds = GetInstructionSets(ddlStations.SelectedValue)
            Else
                ds = GetInstructionSets("-1")
            End If

            ddlInstructionSets.DataSource = ds
            ddlInstructionSets.DataTextField = "Description"
            ddlInstructionSets.DataValueField = "ConfigurationID"
            ddlInstructionSets.DataBind()
            ddlInstructionSets.Items.Insert(0, New ListItem("Choose a Model", ""))

            ddlInstructionSetsCopySrc.DataSource = ds.Copy()
            ddlInstructionSetsCopySrc.DataTextField = "Description"
            ddlInstructionSetsCopySrc.DataValueField = "ConfigurationID"
            ddlInstructionSetsCopySrc.DataBind()
            ddlInstructionSetsCopySrc.Items.Insert(0, New ListItem("Choose a Model", ""))

            ddlInstructionSetsCopyDst.Items.Insert(0, New ListItem("Choose a Model", ""))

            LoadInstructions()

        Catch ex As Exception
            Master.eMsg(ex.ToString())
        End Try
    End Sub

    Private Sub LoadInstructions()
        Try
        'clear the controls
        UncheckListA()
        UncheckListB()
        lblMCRNumber.Text = ""
        lblMCRDate.Text = ""
        SelectedRowIndex = -1

        BuildGrid2Columns()

        If ddlInstructionSets.SelectedIndex > 0 Then

            DisplayMCR()
            CheckOffItemsInAuxList(cblAuxListA, ConfigurationTypes.AuxiliaryListA)
            CheckOffItemsInAuxList(cblAuxListB, ConfigurationTypes.AuxiliaryListB)
            cblAuxListA.Enabled = True
            cblAuxListB.Enabled = True

        End If
            gvSteps.DataBind()
        Catch ex As Exception
            Master.eMsg(ex.ToString())
        End Try
    End Sub

    Private Sub LoadAuxiliaryList(ByRef cblAuxList As CheckBoxList, ByVal listConfigurationTypeID As ConfigurationTypes)
        Try
            cblAuxList.Items.Clear()
            cblAuxList.DataSource = GetConfigurations(listConfigurationTypeID)
            cblAuxList.DataTextField = "Description"
            cblAuxList.DataValueField = "ConfigurationID"
            cblAuxList.DataBind()
            cblAuxList.Enabled = False
        Catch ex As Exception
            Master.eMsg(ex.ToString())
        End Try
    End Sub

    Private Sub DisplayMCR()
        Dim mcrDate As Date
        Dim ds As DataSet = GetMCR()

        If (ds.IsNotEmpty()) Then
            lblMCRNumber.Text = ds.Tables(0).Rows(0).Item("MCRNumber").ToString()
            txtMCRNumberNew.Text = lblMCRNumber.Text

            If (Date.TryParse(ds.Tables(0).Rows(0).Item("MCRDate").ToString(), mcrDate)) Then
                lblMCRDate.Text = mcrDate.ToString("MM/dd/yyyy")
            Else
                Master.eMsg("MCR Date in not in a valid format.")
                lblMCRDate.Text = Now().ToString("d")
            End If
            txtMCRDateNew.Text = lblMCRDate.Text
        End If
    End Sub

    Private Sub CheckOffItemsInAuxList(ByRef cblAuxList As CheckBoxList, ByVal listConfigurationTypeID As ConfigurationTypes)
        Dim ds As DataSet
        Dim item As ListItem
        Try
            'check off any items in the Auxiliary list.
            ds = GetAuxiliaryLists(listConfigurationTypeID)
            If (DA.IsDataSetNotEmpty(ds)) Then
                For Each row As DataRow In ds.Tables(0).Rows
                    item = cblAuxList.Items.FindByValue(row.Item("ConfigurationID").ToString())
                    If item IsNot Nothing Then
                        item.Selected = True
                    End If
                Next
            End If
        Catch ex As Exception
            Master.eMsg(ex.ToString())
        End Try
    End Sub

    Private Function GetStations(ByVal lineID As Integer) As DataSet
        Dim ds As DataSet = Nothing
        Try
            Dim parameters As New List(Of SqlParameter)
            parameters.Add(New SqlParameter("@LineID", lineID))
            parameters.Add(New SqlParameter("@hasInstructions", DBNull.Value))

            ds = DA.GetDataSet("[ods].[procSelectStations]", parameters, "")
        Catch ex As Exception
            Master.eMsg(ex.ToString())
        End Try
        Return ds
    End Function

    Private Function GetConfigurationTypes() As DataSet

        Dim parameters As New List(Of SqlParameter)
        parameters.Add(New SqlParameter("@ConfigurationTypeID", DBNull.Value))
        Dim ds As DataSet = DA.GetDataSet("[ods].[procSelectConfigurationTypes]", parameters, "")

        Return ds
    End Function

    Private Function GetConfigurations(ByVal configurationTypeID As Integer) As DataSet

        Dim parameters As New List(Of SqlParameter)
        parameters.Add(New SqlParameter("@ConfigurationTypeID", configurationTypeID.ToString()))
        Dim ds As DataSet = DA.GetDataSet("[ods].[procSelectConfigurations]", parameters, "")

        Return ds

    End Function

    Private Function GetInstructionSets(ByVal stationID As String) As DataSet
        Dim ds As DataSet
        Dim parameters As New List(Of SqlParameter)
        parameters.Add(New SqlParameter("@StationID", stationID))
        parameters.Add(New SqlParameter("@hasInstructions", DBNull.Value))

        ds = DA.GetDataSet("[ods].[procSelectInstructionSets]", parameters, "")

        Return ds
    End Function

    Private Function GetInstructions(ByVal lineID As Integer, ByVal stationID As String, ByVal instructionConfigurationID As Integer) As DataSet

        Dim parameters As New List(Of SqlParameter)
        parameters.Add(New SqlParameter("@LineID", lineID.ToString()))
        parameters.Add(New SqlParameter("@StationID", stationID.ToString()))
        parameters.Add(New SqlParameter("@ConfigurationID", instructionConfigurationID.ToString()))
        Dim ds As DataSet = DA.GetDataSet("[ods].[procSelectInstructions]", parameters, "")

        Return ds
    End Function

    Private Function GetInstructionStepConfigurations(ByVal lineID As Integer, ByVal stationID As String, ByVal instructionConfigurationID As Integer) As DataSet

        Dim ds As DataSet
        Dim parameters As New List(Of SqlParameter)

        If lineID = 0 Then
            parameters.Add(New SqlParameter("@LineID", DBNull.Value))
        Else
            parameters.Add(New SqlParameter("@LineID", lineID.ToString()))
        End If

        If stationID Is Nothing Then
            parameters.Add(New SqlParameter("@StationID", DBNull.Value))
        Else
            parameters.Add(New SqlParameter("@StationID", stationID.ToString()))
        End If

        If instructionConfigurationID = 0 Then
            parameters.Add(New SqlParameter("@ConfigurationID", DBNull.Value))
        Else
            parameters.Add(New SqlParameter("@ConfigurationID", instructionConfigurationID.ToString()))
        End If

        ds = DA.GetDataSet("[ods].[procSelectInstructionStepConfigurations]", parameters, "")

        Return ds

    End Function

    Private Function GetAuxiliaryLists(ByVal listConfigurationTypeID As Integer) As DataSet
        Dim ds As DataSet = Nothing
        Dim parameters As New List(Of SqlParameter)

        Try
            parameters.Add(New SqlParameter("@LineID", LineID))
            parameters.Add(New SqlParameter("@StationID", StationID))
            parameters.Add(New SqlParameter("@ConfigurationID", ConfigurationID))
            parameters.Add(New SqlParameter("@ConfigurationTypeID", listConfigurationTypeID))

            ds = DA.GetDataSet("[ods].[procSelectInstructionAuxiliaryLists]", parameters, "")

        Catch ex As Exception
            Master.eMsg(ex.ToString())
        End Try

        Return ds

    End Function

    Private Function GetMCR() As DataSet
        Dim ds As DataSet
        Dim parameters As New List(Of SqlParameter)

        parameters.Add(New SqlParameter("@lineID", LineID.ToString()))
        parameters.Add(New SqlParameter("@stationID", StationID))
        parameters.Add(New SqlParameter("@configurationID", ConfigurationID.ToString()))

        ds = DA.GetDataSet("[ods].[procSelectMasterChangeRequests]", parameters, "")
        Return ds
    End Function

    Private Sub SaveAuxiliaryList(ByRef cblAuxiliaryList As CheckBoxList, ByVal listConfigurationTypeID As ConfigurationTypes)
        Dim csvAuxiliaryList As New StringBuilder
        Try
            'get and save Auxiliary list
            For Each li As ListItem In cblAuxiliaryList.Items
                If li.Selected = True Then
                    csvAuxiliaryList.Append(li.Value).Append(",")
                End If
            Next
            If csvAuxiliaryList.Length > 1 Then
                csvAuxiliaryList.Length = csvAuxiliaryList.Length - 1   'trim the last comma
            End If
            UpdateAuxiliaryLists(listConfigurationTypeID, csvAuxiliaryList.ToString())
        Catch ex As Exception
            Master.eMsg(ex.ToString())
        End Try
    End Sub

    Private Function UpdateAuxiliaryLists(ByVal listConfigurationTypeID As Integer, ByVal csvItems As String) As DataSet
        Dim ds As DataSet = Nothing
        Dim parameters As New List(Of SqlParameter)
        Try
            parameters.Add(New SqlParameter("@LineID", LineID))
            parameters.Add(New SqlParameter("@StationID", StationID))
            parameters.Add(New SqlParameter("@ConfigurationID", ConfigurationID))
            parameters.Add(New SqlParameter("@List_ConfigurationTypeID", listConfigurationTypeID))
            parameters.Add(New SqlParameter("@ListItemIDs_csv", csvItems))
            parameters.Add(New SqlParameter("@ModifiedBy", Page.User.Identity.Name))
            ds = DA.GetDataSet("[ods].[procUpdateInstructionLists]", parameters, "")
        Catch ex As Exception
            Master.eMsg(ex.ToString())
        End Try

        Return ds
    End Function

    Private Sub CopyInstructionsToDB(ByVal xmlParameters As XmlDocument)
        Dim parameters As New List(Of SqlParameter)
        Try
            parameters.Add(New SqlParameter("@xmlParameters", xmlParameters.InnerXml.ToString()))
            parameters.Add(New SqlParameter("@ModifiedBy", Page.User.Identity.Name.ToString()))
            DA.ExecSP("[ods].[procCopyInstructions]", parameters)
        Catch ex As Exception
            Master.eMsg(ex.ToString())
        End Try
    End Sub

    Private Sub SaveGridViewChecks()
        Try
            Dim values As String = GetXMLDirtyRows(gvChecks)

            If Len(values) > 1 Then
                Dim parameters As New List(Of SqlParameter)
                parameters.Add(New SqlParameter("@LineID", LineID))
                parameters.Add(New SqlParameter("@StationID", StationID))
                parameters.Add(New SqlParameter("@instruction_ConfigurationID", ConfigurationID))
                parameters.Add(New SqlParameter("@xmlParameters", values))
                parameters.Add(New SqlParameter("@ModifiedBy", Page.User.Identity.Name))
                DA.ExecSP("[ods].[procUpdateInstructionConfigurations]", parameters)
            End If
        Catch ex As Exception
            Master.eMsg(ex.ToString())
        End Try
    End Sub

    Private Function GetXMLDirtyRows(ByRef grid As GGS.BulkEditGridView) As String
        Dim xmlDoc As New XmlDocument()

        Try
            Dim dirtyRows As List(Of GridViewRow) = grid.DirtyRows

            If dirtyRows.Count > 0 Then
                Dim xmlGrid As XmlElement = xmlDoc.CreateElement("grid")
                For Each row As GridViewRow In dirtyRows
                    'extract the cell values
                    Dim values As New OrderedDictionary()
                    Dim headerValues As New List(Of String)
                    For Each cell As DataControlFieldCell In row.Cells
                        cell.ContainingField.ExtractValuesFromCell(values, cell, row.RowState, True)
                        If values.Count = headerValues.Count + 1 Then
                            'only add the headertext if there was a cell value
                            headerValues.Add(cell.ContainingField.HeaderText)
                        End If
                    Next (cell)

                    'build the xml row
                    Dim xmlRow As XmlElement = xmlDoc.CreateElement("row")
                    For index As Integer = 0 To values.Count - 1
                        If values(index) IsNot Nothing AndAlso headerValues(index) IsNot Nothing Then
                            Dim xmlCol As XmlElement = xmlDoc.CreateElement("column")
                            xmlCol.SetAttribute("name", headerValues(index).ToString())
                            xmlCol.SetAttribute("value", values(index).ToString())
                            xmlRow.AppendChild(xmlCol)
                        End If
                    Next index

                    'get row data keys   (works except if the datakeyname has a space or special character not supported by xml)
                    For Each key As DictionaryEntry In grid.DataKeys(row.RowIndex).Values
                        xmlRow.SetAttribute(key.Key.ToString(), key.Value.ToString())
                    Next
                    xmlGrid.AppendChild(xmlRow)
                Next row

                xmlDoc.AppendChild(xmlGrid)
            End If
        Catch ex As Exception
            Master.eMsg(ex.ToString())
        End Try

        Return xmlDoc.InnerXml
    End Function

    Private Function SaveMCRNumber() As Boolean
        Dim result As Boolean = False
        Dim parameters As New List(Of SqlParameter)
        Dim mcrDate As Date
        Dim mcrNumber As String
        Try
            If (Date.TryParse(txtMCRDateNew.Text, mcrDate) = False) Then
                Master.eMsg("MCR Date is not a valid date.")
            Else
                mcrNumber = txtMCRNumberNew.Text.Trim()

                parameters.Add(New SqlParameter("@lineID", LineID))
                parameters.Add(New SqlParameter("@stationID", StationID))
                parameters.Add(New SqlParameter("@configurationID", ConfigurationID))
                parameters.Add(New SqlParameter("@mcrNumber", mcrNumber.Trim()))
                parameters.Add(New SqlParameter("@mcrDate", mcrDate.ToString()))
                parameters.Add(New SqlParameter("@modifiedBy", Page.User.Identity.Name))
                DA.ExecSP("[ods].[procUpdateMasterChangeRequest]", parameters)

                result = True

            End If
        Catch ex As Exception
            Master.eMsg(ex.ToString())
        End Try

        Return result
    End Function


    Private Sub SaveInstructionSteps()
        Try
            If (SaveMCRNumber()) Then
                gvSteps.Save()
                SaveGridViewChecks()
                SaveAuxiliaryList(cblAuxListA, ConfigurationTypes.AuxiliaryListA)
                SaveAuxiliaryList(cblAuxListB, ConfigurationTypes.AuxiliaryListB)
                Master.Msg = "Configuration has been saved."
            Else
                Master.Msg = "Configuration has not been saved."
            End If

            'reload all information
            ResetPage(LineID, StationID, ConfigurationID)

        Catch ex As Exception
            Master.eMsg(ex.ToString())
        End Try
    End Sub

    Private Sub UncheckListA()
        For Each item As ListItem In cblAuxListA.Items
            item.Selected = False
        Next
    End Sub

    Private Sub UncheckListB()
        For Each item As ListItem In cblAuxListB.Items
            item.Selected = False
        Next
    End Sub

    Private Sub EnableControls()
        Try
            Master.Secure(cmdMoveUp)
            Master.Secure(cmdMoveDown)
            Master.Secure(cmdSave)
            Master.Secure(cmdCopy)
            Master.Secure(cmdClearRow)
            Master.Secure(cmdRefresh)


            If ddlLineNumbers.SelectedIndex > 0 Then
                ddlStations.Enabled = True
            Else
                ddlStations.Enabled = False
                cmdRefresh.Enabled = False
            End If

            If ddlStations.SelectedIndex > 0 Then
                ddlInstructionSets.Enabled = True
            Else
                cmdRefresh.Enabled = False
                ddlInstructionSets.Enabled = False
                ddlInstructionSets.SelectedIndex = -1
            End If

            If ddlInstructionSets.SelectedIndex > 0 Then
                cblAuxListA.Enabled = True
                cblAuxListB.Enabled = True
                gvSteps.Enabled = True
                gvChecks.Enabled = True
                cmdMoveUp.Enabled = cmdMoveUp.Enabled And True 'And SelectedRowIndex > 0
                cmdMoveDown.Enabled = cmdMoveDown.Enabled And True 'And SelectedRowIndex > 0 And SelectedRowIndex < gvSteps.Rows.Count - 1
                cmdClearRow.Enabled = cmdClearRow.Enabled And True
                cmdRefresh.Enabled = cmdRefresh.Enabled And True
            Else
                cblAuxListA.Enabled = False
                cblAuxListB.Enabled = False
                gvSteps.Enabled = False
                gvChecks.Enabled = False
                cmdMoveUp.Enabled = False
                cmdMoveDown.Enabled = False
                cmdClearRow.Enabled = False
                cmdRefresh.Enabled = False

                cmdSave.Enabled = False
            End If

            'Copy Dialog:source
            If ddlLineNumbersCopySrc.SelectedIndex > 0 Then
                ddlStationsCopySrc.Enabled = True
            Else
                ddlStationsCopySrc.Enabled = False
            End If

            If ddlStationsCopySrc.SelectedIndex > 0 Then
                ddlInstructionSetsCopySrc.Enabled = True
            Else
                ddlInstructionSetsCopySrc.Enabled = False
            End If

            If ddlInstructionSetsCopySrc.SelectedIndex > 0 Then
                lbInstructionsCopySrc.Enabled = True
            Else
                lbInstructionsCopySrc.Enabled = False
            End If

            'Copy Dialog: destination
            If ddlLineNumbersCopyDst.SelectedIndex > 0 Then
                ddlStationsCopyDst.Enabled = True
            Else
                ddlStationsCopyDst.Enabled = False
            End If

            If ddlStationsCopyDst.SelectedIndex > 0 Then
                ddlInstructionSetsCopyDst.Enabled = True
            Else
                ddlInstructionSetsCopyDst.Enabled = False
            End If

            If ddlInstructionSetsCopyDst.SelectedIndex > 0 Then
                lbInstructionsCopyDst.Enabled = True
            Else
                lbInstructionsCopyDst.Enabled = False
            End If


            'Copy Dialog: Down arrows
            If ddlInstructionSetsCopyDst.SelectedIndex > 0 AndAlso rblCopyMode.SelectedIndex > -1 Then
                If rblCopyMode.SelectedValue = "0" Then
                    'moving all items
                    cmdMoveDownCopy.Enabled = True
                ElseIf rblCopyMode.SelectedValue = "1" AndAlso lbInstructionsCopySrc.SelectedIndex > -1 Then
                    If lbInstructionsCopyDst.Items.FindByText(lbInstructionsCopySrc.SelectedItem.Text) Is Nothing Then
                        'only copy items that do not exist in the destination box.
                        cmdMoveDownCopy.Enabled = True
                    Else
                        cmdMoveDownCopy.Enabled = False
                    End If
                Else
                    cmdMoveDownCopy.Enabled = False
                End If
            Else
                cmdMoveDownCopy.Enabled = False
            End If

            'Copy Dialog: up arrows
            If lbInstructionsCopyDst.SelectedIndex > -1 Then
                cmdMoveUpCopy.Enabled = True
            Else
                cmdMoveUpCopy.Enabled = False
            End If

        Catch ex As Exception
            Master.eMsg(ex.ToString())
        End Try
    End Sub

#End Region

#Region "Copy Dialog Events"

    Private Sub ddlLineNumbersCopySrc_SelectedIndexChanged(sender As Object, e As System.EventArgs) Handles ddlLineNumbersCopySrc.SelectedIndexChanged
        Try
            LoadStationsCopySrc()
            LoadInstructionSetsCopySrc()
            LoadInstructionsCopySrc()
        Catch ex As Exception
            Master.eMsg(ex.ToString())
            copyMsg.InnerText = ex.ToString()
        End Try
    End Sub

    Private Sub ddlStationsCopySrc_SelectedIndexChanged(sender As Object, e As System.EventArgs) Handles ddlStationsCopySrc.SelectedIndexChanged
        Try
            LoadInstructionSetsCopySrc()
            LoadInstructionsCopySrc()
        Catch ex As Exception
            Master.eMsg(ex.ToString())
            copyMsg.InnerText = ex.ToString()
        End Try
    End Sub

    Private Sub ddlInstructionSetsCopySrc_SelectedIndexChanged(sender As Object, e As System.EventArgs) Handles ddlInstructionSetsCopySrc.SelectedIndexChanged
        Try
            LoadInstructionsCopySrc()
        Catch ex As Exception
            Master.eMsg(ex.ToString())
            copyMsg.InnerText = ex.ToString()
        End Try
    End Sub

    Private Sub ddlLineNumbersCopyDst_SelectedIndexChanged(sender As Object, e As System.EventArgs) Handles ddlLineNumbersCopyDst.SelectedIndexChanged
        Try
            LoadStationsCopyDst()
            LoadInstructionSetsCopyDst()
            LoadInstructionsCopyDst()
        Catch ex As Exception
            Master.eMsg(ex.ToString())
            copyMsg.InnerText = ex.ToString()
        End Try
    End Sub

    Private Sub ddlStationsCopyDst_SelectedIndexChanged(sender As Object, e As System.EventArgs) Handles ddlStationsCopyDst.SelectedIndexChanged
        Try
            LoadInstructionSetsCopyDst()
            LoadInstructionsCopyDst()
        Catch ex As Exception
            Master.eMsg(ex.ToString())
            copyMsg.InnerText = ex.ToString()
        End Try
    End Sub

    Private Sub ddlInstructionSetsCopyDst_SelectedIndexChanged(sender As Object, e As System.EventArgs) Handles ddlInstructionSetsCopyDst.SelectedIndexChanged
        Try
            LoadInstructionsCopyDst()
        Catch ex As Exception
            Master.eMsg(ex.ToString())
            copyMsg.InnerText = ex.ToString()
        End Try
    End Sub

    Private Sub cmdMoveUpCopy_Click(sender As Object, e As System.Web.UI.ImageClickEventArgs) Handles cmdMoveUpCopy.Click
        Try
            copyMsg.InnerText = ""
            If lbInstructionsCopyDst.SelectedIndex >= 0 Then
                lbInstructionsCopyDst.Items.RemoveAt(lbInstructionsCopyDst.SelectedIndex)
                copyStepCount.Value = CStr(CInt(copyStepCount.Value) - 1)
            End If

        Catch ex As Exception
            Master.eMsg(ex.ToString())
            copyMsg.InnerText = ex.ToString()
        End Try
    End Sub

    Private Sub cmdMoveDownCopy_Click(sender As Object, e As System.Web.UI.ImageClickEventArgs) Handles cmdMoveDownCopy.Click
        Try
            Dim cnt As Integer = CInt(copyStepCount.Value)
            copyMsg.InnerText = ""
            If rblCopyMode.SelectedIndex <> -1 Then
                Select Case CInt(rblCopyMode.SelectedItem.Value)
                    Case 0
                        For Each item As ListItem In lbInstructionsCopySrc.Items
                            If lbInstructionsCopyDst.Items.FindByText(item.Text) Is Nothing Then
                                lbInstructionsCopyDst.Items.Add(item)
                                cnt = cnt + 1
                            End If
                        Next
                    Case 1
                        Dim item As ListItem = lbInstructionsCopySrc.SelectedItem
                        item.Selected = False
                        lbInstructionsCopyDst.Items.Add(item)
                        cnt = cnt + 1
                    Case Else
                        copyMsg.InnerText = "Please select a Copy Mode."
                End Select

                copyStepCount.Value = cnt.ToString()
            Else
                copyMsg.InnerText = "Please select a Copy Mode."
            End If

        Catch ex As Exception
            Master.eMsg(ex.ToString())
            copyMsg.InnerText = ex.ToString()
        End Try
    End Sub

#End Region

#Region "Copy Dialog Methods"

    Private Sub CopyStepsToInstruction()
        Try
            'get source
            Dim lineID_src As Integer = CInt(ddlLineNumbersCopySrc.SelectedValue)
            Dim stationID_src As String = ddlStationsCopySrc.SelectedValue
            Dim intructionConfigurationID_src As Integer = CInt(ddlInstructionSetsCopySrc.SelectedValue)

            'get destination
            Dim lineID_dest As Integer = CInt(ddlLineNumbersCopyDst.SelectedValue)
            Dim stationID_dest As String = ddlStationsCopyDst.SelectedValue
            Dim intructionConfigurationID_dest As Integer = CInt(ddlInstructionSetsCopyDst.SelectedValue)

            'create the xml document
            Dim xmlDoc As New XmlDocument()
            xmlDoc.AppendChild(xmlDoc.CreateElement("root"))

            'setup the xml element for communicating the source instruction set.
            Dim xmlSource As XmlElement = xmlDoc.CreateElement("source")
            xmlSource.SetAttribute("LineID", lineID_src.ToString())
            xmlSource.SetAttribute("StationID", stationID_src)
            xmlSource.SetAttribute("ConfigurationID", intructionConfigurationID_src.ToString())
            ' add to the xml document
            xmlDoc.FirstChild.AppendChild(xmlSource)

            'setup the xml element for communicating the destination instruction set.
            Dim xmlDestination As XmlElement = xmlDoc.CreateElement("destination")
            xmlDestination.SetAttribute("LineID", lineID_dest.ToString())
            xmlDestination.SetAttribute("StationID", stationID_dest)
            xmlDestination.SetAttribute("ConfigurationID", intructionConfigurationID_dest.ToString())
            ' add to the xml document
            xmlDoc.FirstChild.AppendChild(xmlDestination)

            'Get all instruction steps to copy
            Dim xmlSteps As XmlElement = xmlDoc.CreateElement("steps")
            For Each item As ListItem In lbInstructionsCopyDst.Items
                'create new node
                Dim child As XmlElement = xmlDoc.CreateElement("step")
                child.SetAttribute("Text", item.Text)
                child.SetAttribute("Value", item.Value.ToString())

                'append new node to the steps
                xmlSteps.AppendChild(child)
            Next
            ' add to the xml document
            xmlDoc.FirstChild.AppendChild(xmlSteps)

            'call the database
            CopyInstructionsToDB(xmlDoc)

            'reload all information
            ResetPage(lineID_dest, stationID_dest, intructionConfigurationID_dest)

        Catch ex As Exception
            Master.eMsg(ex.ToString())
        End Try
    End Sub

    Private Sub LoadStationsCopySrc()
        Try
            ddlStationsCopySrc.Items.Clear()

            If (ddlLineNumbersCopySrc.SelectedIndex > 0) Then
                ddlStationsCopySrc.DataSource = GetStations(CInt(ddlLineNumbersCopySrc.SelectedValue))
                ddlStationsCopySrc.DataTextField = "Description"
                ddlStationsCopySrc.DataValueField = "StationID"
                ddlStationsCopySrc.DataBind()
            End If
            ddlStationsCopySrc.Items.Insert(0, New ListItem("Choose a Station", ""))
            copyMsg.InnerText = ""

        Catch ex As Exception
            Master.eMsg(ex.ToString())
            copyMsg.InnerText = ex.ToString()
        End Try
    End Sub

    ''' <summary>
    ''' Loads the Destination Station Dropdown List
    ''' </summary>
    Private Sub LoadStationsCopyDst()
        Try
            ddlStationsCopyDst.Items.Clear()

            If (ddlLineNumbersCopyDst.SelectedIndex > 0) Then
                ddlStationsCopyDst.DataSource = GetStations(CInt(ddlLineNumbersCopyDst.SelectedValue))
                ddlStationsCopyDst.DataTextField = "Description"
                ddlStationsCopyDst.DataValueField = "StationID"
                ddlStationsCopyDst.DataBind()
            End If

            ddlStationsCopyDst.Items.Insert(0, New ListItem("Choose a Station", ""))
            copyMsg.InnerText = ""

        Catch ex As Exception
            Master.eMsg(ex.ToString())
            copyMsg.InnerText = ex.ToString()
        End Try
    End Sub

    Private Sub LoadInstructionSetsCopySrc()
        Try
            ddlInstructionSetsCopySrc.Items.Clear()

            If (ddlStationsCopySrc.SelectedIndex > 0) Then
                ddlInstructionSetsCopySrc.DataSource = GetInstructionSets(ddlStationsCopySrc.SelectedValue)
                ddlInstructionSetsCopySrc.DataTextField = "Description"
                ddlInstructionSetsCopySrc.DataValueField = "ConfigurationID"
                ddlInstructionSetsCopySrc.DataBind()
            End If

            ddlInstructionSetsCopySrc.Items.Insert(0, New ListItem("Choose a Model", ""))
            copyMsg.InnerText = ""

        Catch ex As Exception
            Master.eMsg(ex.ToString())
            copyMsg.InnerText = ex.ToString()
        End Try
    End Sub

    Private Sub LoadInstructionSetsCopyDst()
        Try
            ddlInstructionSetsCopyDst.Items.Clear()

            If (ddlStationsCopyDst.SelectedIndex > 0) Then
                ddlInstructionSetsCopyDst.DataSource = GetInstructionSets(ddlStationsCopyDst.SelectedValue)
                ddlInstructionSetsCopyDst.DataTextField = "Description"
                ddlInstructionSetsCopyDst.DataValueField = "ConfigurationID"
                ddlInstructionSetsCopyDst.DataBind()
            End If

            ddlInstructionSetsCopyDst.Items.Insert(0, New ListItem("Choose a Model", ""))
            copyMsg.InnerText = ""

        Catch ex As Exception
            Master.eMsg(ex.ToString())
            copyMsg.InnerText = ex.ToString()
        End Try
    End Sub

    Private Sub LoadInstructionsCopySrc()
        Try
            lbInstructionsCopySrc.Items.Clear()

            If ddlInstructionSetsCopySrc.SelectedIndex > 0 Then
                lbInstructionsCopySrc.DataSource = GetInstructions(CInt(ddlLineNumbersCopySrc.SelectedValue), ddlStationsCopySrc.SelectedValue, CInt(ddlInstructionSetsCopySrc.SelectedValue))
                lbInstructionsCopySrc.DataTextField = "Description"
                lbInstructionsCopySrc.DataValueField = "StepID"
                lbInstructionsCopySrc.DataBind()

                If (lbInstructionsCopySrc.Items.Count = 0) Then
                    copyMsg.InnerText = "No Steps found for " + ddlLineNumbersCopySrc.SelectedItem.Text + ", " + ddlStationsCopySrc.SelectedItem.Text + ", " + ddlInstructionSetsCopySrc.SelectedItem.Text
                Else
                    copyMsg.InnerText = ""
                End If

            End If

        Catch ex As Exception
            Master.eMsg(ex.ToString())
            copyMsg.InnerText = ex.ToString()
        End Try
    End Sub

    Private Sub LoadInstructionsCopyDst()
        Try
            lbInstructionsCopyDst.Items.Clear()

            If ddlInstructionSetsCopyDst.SelectedIndex > 0 Then
                lbInstructionsCopyDst.DataSource = GetInstructions(CInt(ddlLineNumbersCopyDst.SelectedValue), ddlStationsCopyDst.SelectedValue, CInt(ddlInstructionSetsCopyDst.SelectedValue))
                lbInstructionsCopyDst.DataTextField = "Description"
                lbInstructionsCopyDst.DataValueField = "StepID"
                lbInstructionsCopyDst.DataBind()

                If (lbInstructionsCopyDst.Items.Count = 0) Then
                    copyMsg.InnerText = "No Steps found for " + ddlLineNumbersCopyDst.SelectedItem.Text + ", " + ddlStationsCopyDst.SelectedItem.Text + ", " + ddlInstructionSetsCopyDst.SelectedItem.Text
                Else
                    copyMsg.InnerText = ""
                End If

            End If

        Catch ex As Exception
            Master.eMsg(ex.ToString())
            copyMsg.InnerText = ex.ToString()
        End Try
    End Sub

#End Region

End Class